import React, { useEffect, useState } from "react";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Description from "@/components/home/description";
import ListRepositories from "@/components/home/list_repositories";
import Repositories from "@/services/repositories";
import type { Repository } from "@/types/repositories";
import TagList from "@/components/home/tag_list";
import type { TagItem } from "@/types/tags";

type HomeProps = {
  /**
   * User name.
   * */
  userName: string;
  /**
   * User's description.
   * */
  userDescription: string;
  /**
   * User's repositories by git api.
   * */
  repositories: Repository[];
};

export default function Home({
  userName,
  userDescription,
  repositories,
}: HomeProps) {
  const [filtersTag, setFiltersTag] = useState<string[]>([]);

  const [allTags, setAllTags] = useState(new Set<TagItem>());

  useEffect(() => {
    const newAllTags = new Set<TagItem>();
    for (const { tags } of repositories) {
      for (const tag of tags) {
        newAllTags.add({ name: tag, active: false });
      }
    }
    setAllTags(newAllTags);
  }, []);

  useEffect(() => {
    const newFiltersTags: string[] = [];

    allTags.forEach((tag) => {
      if (tag.active) {
        newFiltersTags.push(tag.name);
      }
    });

    setFiltersTag(newFiltersTags);
  }, [allTags]);

  return (
    <>
      <Head>
        <title>Portif√≥lio - {userName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <Description description={userDescription} />
        </div>
        <div>
          <TagList tags={allTags} setTags={setAllTags} />
          <ListRepositories
            repositories={repositories}
            expectedTags={filtersTag}
          />
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(): Promise<{ props: HomeProps }> {
  const userName = process.env.USER_NAME || "Erro!";
  const userDescription = process.env.USER_DESCRIPTION || "Erro!";

  const repos = new Repositories();
  const repositories = await repos.getAll();

  return new Promise((resolve) =>
    resolve({
      props: {
        userName,
        userDescription,
        repositories,
      },
    })
  );
}
